// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package account is a generated GoMock package.
package account

import (
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// InsertAccountData mocks base method
func (m *MockRepository) InsertAccountData(name string, credential []byte, permLevel PermLevel) (*Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAccountData", name, credential, permLevel)
	ret0, _ := ret[0].(*Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAccountData indicates an expected call of InsertAccountData
func (mr *MockRepositoryMockRecorder) InsertAccountData(name, credential, permLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAccountData", reflect.TypeOf((*MockRepository)(nil).InsertAccountData), name, credential, permLevel)
}

// ListAccountsData mocks base method
func (m *MockRepository) ListAccountsData(limit, offset *int) ([]Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountsData", limit, offset)
	ret0, _ := ret[0].([]Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountsData indicates an expected call of ListAccountsData
func (mr *MockRepositoryMockRecorder) ListAccountsData(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsData", reflect.TypeOf((*MockRepository)(nil).ListAccountsData), limit, offset)
}

// GetAccountByName mocks base method
func (m *MockRepository) GetAccountByName(name string) (*Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByName", name)
	ret0, _ := ret[0].(*Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByName indicates an expected call of GetAccountByName
func (mr *MockRepositoryMockRecorder) GetAccountByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByName", reflect.TypeOf((*MockRepository)(nil).GetAccountByName), name)
}

// GetDB mocks base method
func (m *MockRepository) GetDB() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetDB indicates an expected call of GetDB
func (mr *MockRepositoryMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockRepository)(nil).GetDB))
}
